const DatabaseInitializer = require('../src/database/init');
const config = require('../src/database/config');

async function main() {
    const args = process.argv.slice(2);
    const isReset = args.includes('--reset');
    const isTest = args.includes('--test');
    
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
    
    const dbInitializer = new DatabaseInitializer(config);
    
    try {
        let success;
        
        if (isReset) {
            console.log('üîÑ –†–µ–∂–∏–º —Å–±—Ä–æ—Å–∞ –ë–î');
            success = await dbInitializer.reset();
        } else if (isTest) {
            console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º');
            success = await dbInitializer.createConnection();
            if (success) {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç');
                await dbInitializer.pool.end();
            }
        } else {
            success = await dbInitializer.initialize();
        }
        
        if (success) {
            console.log('\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            process.exit(0);
        } else {
            console.log('\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
            process.exit(1);
        }
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

main();