const { Pool } = require('pg');
const config = require('../src/database/config');
const axios = require('axios');

async function checkDatabase() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î...');
  const pool = new Pool(config);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await pool.query('SELECT NOW()');
    console.log('  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: OK');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    const tables = ['leads', 'chat_history'];
    for (const table of tables) {
      const result = await pool.query(
        `SELECT COUNT(*) FROM information_schema.tables 
         WHERE table_schema = 'public' AND table_name = $1`,
        [table]
      );
      
      if (result.rows[0].count > 0) {
        console.log(`  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      } else {
        console.log(`  ‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: –ù–ï –ù–ê–ô–î–ï–ù–ê`);
        return false;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const leadsCount = await pool.query('SELECT COUNT(*) FROM leads');
    const messagesCount = await pool.query('SELECT COUNT(*) FROM chat_history');
    
    console.log(`  üìä –õ–∏–¥–æ–≤ –≤ –ë–î: ${leadsCount.rows[0].count}`);
    console.log(`  üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î: ${messagesCount.rows[0].count}`);
    
    await pool.end();
    return true;
  } catch (error) {
    console.error('  ‚ùå –û—à–∏–±–∫–∞ –ë–î:', error.message);
    await pool.end();
    return false;
  }
}

async function checkN8n() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ n8n...');
  
  try {
    const n8nUrl = process.env.N8N_WEBHOOK_URL || 'http://localhost:5678';
    const response = await axios.get(`${n8nUrl}/healthz`, { timeout: 5000 });
    
    if (response.status === 200) {
      console.log('  ‚úÖ n8n –¥–æ—Å—Ç—É–ø–µ–Ω');
      return true;
    }
  } catch (error) {
    console.log('  ‚ö†Ô∏è  n8n –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è)');
    return false;
  }
}

async function checkEnvVariables() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
  
  const required = [
    'DB_HOST',
    'DB_PORT',
    'DB_NAME',
    'DB_USER',
    'DB_PASSWORD',
    'OPENAI_API_KEY'
  ];
  
  const warnings = [
    'NGROK_AUTHTOKEN',
    'N8N_WEBHOOK_URL'
  ];
  
  let allGood = true;
  
  for (const key of required) {
    if (process.env[key]) {
      console.log(`  ‚úÖ ${key}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
    } else {
      console.log(`  ‚ùå ${key}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù`);
      allGood = false;
    }
  }
  
  for (const key of warnings) {
    if (process.env[key]) {
      console.log(`  ‚úÖ ${key}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
    } else {
      console.log(`  ‚ö†Ô∏è  ${key}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è)`);
    }
  }
  
  return allGood;
}

async function main() {
  console.log('üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã WhatsApp Sales Automation\n');
  
  const envOk = await checkEnvVariables();
  const dbOk = await checkDatabase();
  const n8nOk = await checkN8n();
  
  console.log('\nüìã –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:');
  console.log(`  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${envOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`  n8n: ${n8nOk ? '‚úÖ' : '‚ö†Ô∏è'}`);
  
  if (!envOk || !dbOk) {
    console.log('\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
    console.log('\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    if (!envOk) console.log('  1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
    if (!dbOk) console.log('  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run db:init');
    process.exit(1);
  } else {
    console.log('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
    if (!n8nOk) {
      console.log('\n‚ö†Ô∏è  n8n –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d');
    }
    process.exit(0);
  }
}

main().catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});