    const { Pool } = require('pg');
    const fs = require('fs').promises;
    const path = require('path');

    class DatabaseInitializer {
        constructor(config) {
            this.config = config;
            this.pool = null;
        }

        async createConnection() {
            try {
                this.pool = new Pool({
                    host: this.config.host,
                    port: this.config.port,
                    user: this.config.user,
                    password: this.config.password,
                    database: this.config.database
                });
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                return true;
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
                return false;
            }
        }

        async executeSqlFile(filePath) {
            try {
                const fullPath = path.join(__dirname, filePath);
                const sql = await fs.readFile(fullPath, 'utf8');
                console.log(`üìÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Ñ–∞–π–ª–∞: ${filePath}`);
                
                const statements = sql
                    .split(';')
                    .map(stmt => stmt.trim())
                    .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));
                
                for (const statement of statements) {
                    if (statement.trim()) {
                        try {
                            await this.pool.query(statement.trim());
                        } catch (error) {
                            if (!error.message.includes('already exists')) {
                                console.warn(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${error.message}`);
                            }
                        }
                    }
                }
                
                console.log(`‚úÖ SQL —Ñ–∞–π–ª ${filePath} –≤—ã–ø–æ–ª–Ω–µ–Ω`);
                return true;
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —Ñ–∞–π–ª–∞:`, error.message);
                return false;
            }
        }

        async checkTables() {
            try {
                const query = `
                    SELECT tablename 
                    FROM pg_tables 
                    WHERE schemaname = 'public' 
                    ORDER BY tablename
                `;
                
                const result = await this.pool.query(query);
                const tables = result.rows.map(row => row.tablename);
                
                console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
                tables.forEach(table => console.log(`  - ${table}`));
                
                return tables;
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü:', error.message);
                return [];
            }
        }

        async initialize() {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
            
            try {
                const connected = await this.createConnection();
                if (!connected) return false;

                const schemaCreated = await this.executeSqlFile('schema.sql');
                if (!schemaCreated) return false;

                const tables = await this.checkTables();
                if (tables.length === 0) {
                    console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    return false;
                }

                console.log('\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
                console.log('\nüìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è n8n:');
                console.log(`   Host: ${this.config.host}`);
                console.log(`   Database: ${this.config.database}`);
                console.log(`   User: ${this.config.user}`);
                console.log(`   Password: ${this.config.password}`);
                console.log(`   Port: ${this.config.port}`);
                
                return true;
            } catch (error) {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
                return false;
            } finally {
                if (this.pool) {
                    await this.pool.end();
                }
            }
        }

        async reset() {
            console.log('üîÑ –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            
            try {
                const connected = await this.createConnection();
                if (!connected) return false;
                
                const dropQueries = [
                    'DROP TABLE IF EXISTS chat_history CASCADE',
                    'DROP TABLE IF EXISTS leads CASCADE'
                ];
                
                for (const query of dropQueries) {
                    try {
                        await this.pool.query(query);
                    } catch (error) {
                        console.warn(`‚ö†Ô∏è ${error.message}`);
                    }
                }
                
                console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã');
                await this.pool.end();
                
                return await this.initialize();
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ë–î:', error.message);
                return false;
            }
        }
    }

    module.exports = DatabaseInitializer;