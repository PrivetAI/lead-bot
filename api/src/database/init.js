const { Pool } = require('pg');
const fs = require('fs').promises;
const path = require('path');

class DatabaseInitializer {
    constructor(config) {
        this.config = config;
        this.pool = null;
    }

    async createConnection() {
        try {
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            this.pool = new Pool({
                host: this.config.host,
                port: this.config.port,
                user: this.config.user,
                password: this.config.password,
                database: this.config.database
            });

            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', error.message);
            return false;
        }
    }

    async executeSqlFile(filePath) {
        try {
            const fullPath = path.join(__dirname, filePath);
            const sql = await fs.readFile(fullPath, 'utf8');
            
            console.log(`üìÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Ñ–∞–π–ª–∞: ${filePath}`);
            
            // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            const statements = sql
                .split(';')
                .map(stmt => stmt.trim())
                .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));
            
            for (const statement of statements) {
                if (statement.trim()) {
                    try {
                        await this.pool.query(statement.trim());
                    } catch (error) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                        if (!error.message.includes('already exists') && 
                            !error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') &&
                            !error.message.includes('duplicate key')) {
                            console.warn(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ SQL: ${error.message}`);
                        }
                    }
                }
            }
            
            console.log(`‚úÖ SQL —Ñ–∞–π–ª ${filePath} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
            return false;
        }
    }

    async checkTables() {
        try {
            const query = `
                SELECT tablename 
                FROM pg_tables 
                WHERE schemaname = 'public' 
                ORDER BY tablename
            `;
            
            const result = await this.pool.query(query);
            const tables = result.rows.map(row => row.tablename);
            
            console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
            tables.forEach(table => {
                console.log(`  - ${table}`);
            });
            
            return tables;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü:', error.message);
            return [];
        }
    }

    async insertTestData() {
        try {
            console.log('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è n8n workflow)
            const newTestLeads = [
                {
                    lead_id: 2001,
                    name: '–¢–µ—Å—Ç N8N –õ–∏–¥',
                    phone: '79001112233',
                    company_info: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è N8N',
                    business_type: 'IT',
                    status: 'new'
                }
            ];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ leads —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            const checkTableQuery = `
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'leads' AND column_name = 'lead_id'
            `;
            
            const tableResult = await this.pool.query(checkTableQuery);
            
            if (tableResult.rows.length > 0) {
                for (const lead of newTestLeads) {
                    const checkQuery = `SELECT 1 FROM leads WHERE lead_id = $1`;
                    const existing = await this.pool.query(checkQuery, [lead.lead_id]);
                    
                    if (existing.rows.length === 0) {
                        const insertQuery = `
                            INSERT INTO leads (lead_id, name, phone, company_info, business_type, status) 
                            VALUES ($1, $2, $3, $4, $5, $6)
                        `;
                        
                        await this.pool.query(insertQuery, [
                            lead.lead_id,
                            lead.name,
                            lead.phone,
                            lead.company_info,
                            lead.business_type,
                            lead.status
                        ]);
                        
                        console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ª–∏–¥: ${lead.name}`);
                    } else {
                        console.log(`  ‚ö†Ô∏è –õ–∏–¥ ${lead.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                    }
                }
            } else {
                console.log('  ‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ leads –∏–º–µ–µ—Ç —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
            }
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
            return false;
        }
    }

    async initialize() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è n8n workflow...\n');
        
        try {
            const connected = await this.createConnection();
            if (!connected) return false;

            console.log('‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (—Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ Docker)');

            const schemaCreated = await this.executeSqlFile('schema.sql');
            if (!schemaCreated) return false;

            const tables = await this.checkTables();
            if (tables.length === 0) {
                console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return false;
            }

            await this.insertTestData();

            console.log('\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            console.log('\nüìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è n8n:');
            console.log(`   Host: ${this.config.host}`);
            console.log(`   Database: ${this.config.database}`);
            console.log(`   User: ${this.config.user}`);
            console.log(`   Password: ${this.config.password}`);
            console.log(`   Port: ${this.config.port}`);
            
            return true;
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
            return false;
        } finally {
            if (this.pool) {
                await this.pool.end();
            }
        }
    }

    async reset() {
        console.log('üîÑ –°–±—Ä–æ—Å —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            const connected = await this.createConnection();
            if (!connected) return false;
            
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è n8n workflow
            const dropQueries = [
                'DROP TABLE IF EXISTS ai_responses_log CASCADE',
                'DROP TABLE IF EXISTS meetings CASCADE', 
                'DROP TABLE IF EXISTS chat_history CASCADE',
                'DROP TABLE IF EXISTS system_settings CASCADE',
                'DROP VIEW IF EXISTS lead_analytics CASCADE',
                'DROP VIEW IF EXISTS chat_statistics CASCADE',
                'DROP VIEW IF EXISTS sales_funnel CASCADE'
            ];
            
            for (const query of dropQueries) {
                try {
                    await this.pool.query(query);
                } catch (error) {
                    console.warn(`‚ö†Ô∏è ${error.message}`);
                }
            }
            
            console.log('‚úÖ –°—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã');
            
            await this.pool.end();
            
            return await this.initialize();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
            return false;
        }
    }
}

module.exports = DatabaseInitializer;
