const { Pool } = require('pg');
const fs = require('fs').promises;
const path = require('path');

class DatabaseInitializer {
    constructor(config) {
        this.config = config;
        this.pool = null;
    }

    async createConnection() {
        try {
            this.pool = new Pool({
                host: this.config.host,
                port: this.config.port,
                user: this.config.user,
                password: this.config.password,
                database: this.config.database
            });
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
            return false;
        }
    }

    async executeSqlFile(filePath) {
        try {
            const fullPath = path.join(__dirname, filePath);
            const sql = await fs.readFile(fullPath, 'utf8');
            console.log(`üìÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Ñ–∞–π–ª–∞: ${filePath}`);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –∫–∞–∫ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            try {
                await this.pool.query(sql);
                console.log(`‚úÖ SQL —Ñ–∞–π–ª ${filePath} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                return true;
            } catch (error) {
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ —á–∞—Å—Ç—è–º
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ü–µ–ª–æ–≥–æ —Ñ–∞–π–ª–∞, –ø—Ä–æ–±—É–µ–º –ø–æ —á–∞—Å—Ç—è–º...');
                
                // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ–ª–µ–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
                const commands = sql
                    .split(/;\s*$/m)
                    .map(cmd => cmd.trim())
                    .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));
                
                for (let i = 0; i < commands.length; i++) {
                    const command = commands[i];
                    if (command.trim()) {
                        try {
                            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
                            let fullCommand = command;
                            if (command.includes('$$') || command.includes('CREATE FUNCTION') || command.includes('CREATE OR REPLACE FUNCTION')) {
                                fullCommand = command + ';';
                            }
                            
                            await this.pool.query(fullCommand);
                            console.log(`  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1}/${commands.length} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
                        } catch (cmdError) {
                            if (!cmdError.message.includes('already exists')) {
                                console.error(`  ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, cmdError.message);
                                console.error(`     SQL: ${command.substring(0, 100)}...`);
                            }
                        }
                    }
                }
            }
            
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —Ñ–∞–π–ª–∞:`, error.message);
            return false;
        }
    }

    async checkTables() {
        try {
            const query = `
                SELECT tablename 
                FROM pg_tables 
                WHERE schemaname = 'public' 
                ORDER BY tablename
            `;
            
            const result = await this.pool.query(query);
            const tables = result.rows.map(row => row.tablename);
            
            console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
            tables.forEach(table => console.log(`  - ${table}`));
            
            return tables;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü:', error.message);
            return [];
        }
    }

    async initialize() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
        
        try {
            const connected = await this.createConnection();
            if (!connected) return false;

            const schemaCreated = await this.executeSqlFile('schema.sql');
            if (!schemaCreated) {
                console.log('‚ö†Ô∏è –ë—ã–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ö–µ–º—ã, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
            }

            const tables = await this.checkTables();
            if (tables.length === 0) {
                console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ...');
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –Ω–∞–ø—Ä—è–º—É—é
                try {
                    await this.pool.query(`
                        CREATE TABLE IF NOT EXISTS leads (
                            id SERIAL PRIMARY KEY,
                            amocrm_id VARCHAR(255) UNIQUE NOT NULL,
                            name VARCHAR(255) NOT NULL,
                            phone VARCHAR(20) UNIQUE NOT NULL,
                            email VARCHAR(255),
                            wa_id VARCHAR(50),
                            status VARCHAR(50) DEFAULT 'new',
                            classification TEXT,
                            company_size TEXT,
                            budget_range TEXT,
                            needs TEXT,
                            urgency TEXT,
                            company_info TEXT,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    `);
                    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ leads —Å–æ–∑–¥–∞–Ω–∞');
                    
                    await this.pool.query(`
                        CREATE TABLE IF NOT EXISTS chat_history (
                            id SERIAL PRIMARY KEY,
                            lead_id INTEGER REFERENCES leads(id) ON DELETE CASCADE,
                            phone VARCHAR(20) NOT NULL,
                            message TEXT NOT NULL,
                            direction VARCHAR(10) NOT NULL CHECK (direction IN ('incoming', 'outgoing')),
                            ai_agent VARCHAR(20),
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                        )
                    `);
                    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ chat_history —Å–æ–∑–¥–∞–Ω–∞');
                    
                    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                    const indexes = [
                        'CREATE INDEX IF NOT EXISTS idx_leads_phone ON leads(phone)',
                        'CREATE INDEX IF NOT EXISTS idx_leads_amocrm_id ON leads(amocrm_id)',
                        'CREATE INDEX IF NOT EXISTS idx_leads_status ON leads(status)',
                        'CREATE INDEX IF NOT EXISTS idx_leads_classification ON leads(classification)',
                        'CREATE INDEX IF NOT EXISTS idx_chat_lead_id ON chat_history(lead_id)',
                        'CREATE INDEX IF NOT EXISTS idx_chat_phone ON chat_history(phone)',
                        'CREATE INDEX IF NOT EXISTS idx_chat_created ON chat_history(created_at)'
                    ];
                    
                    for (const idx of indexes) {
                        await this.pool.query(idx);
                    }
                    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
                    
                    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ —Ç—Ä–∏–≥–≥–µ—Ä
                    await this.pool.query(`
                        CREATE OR REPLACE FUNCTION update_updated_at_column()
                        RETURNS TRIGGER AS $$
                        BEGIN
                            NEW.updated_at = CURRENT_TIMESTAMP;
                            RETURN NEW;
                        END;
                        $$ LANGUAGE plpgsql
                    `);
                    
                    await this.pool.query('DROP TRIGGER IF EXISTS update_leads_updated_at ON leads');
                    await this.pool.query(`
                        CREATE TRIGGER update_leads_updated_at 
                        BEFORE UPDATE ON leads
                        FOR EACH ROW 
                        EXECUTE FUNCTION update_updated_at_column()
                    `);
                    console.log('‚úÖ –¢—Ä–∏–≥–≥–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã');
                    
                } catch (createError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –Ω–∞–ø—Ä—è–º—É—é:', createError.message);
                    return false;
                }
            }

            console.log('\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            console.log('\nüìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è n8n:');
            console.log(`   Host: ${this.config.host}`);
            console.log(`   Database: ${this.config.database}`);
            console.log(`   User: ${this.config.user}`);
            console.log(`   Password: ${this.config.password}`);
            console.log(`   Port: ${this.config.port}`);
            
            return true;
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
            return false;
        } finally {
            if (this.pool) {
                await this.pool.end();
            }
        }
    }

    async reset() {
        console.log('üîÑ –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            const connected = await this.createConnection();
            if (!connected) return false;
            
            const dropQueries = [
                'DROP TABLE IF EXISTS chat_history CASCADE',
                'DROP TABLE IF EXISTS leads CASCADE',
                'DROP FUNCTION IF EXISTS update_updated_at_column() CASCADE'
            ];
            
            for (const query of dropQueries) {
                try {
                    await this.pool.query(query);
                } catch (error) {
                    console.warn(`‚ö†Ô∏è ${error.message}`);
                }
            }
            
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã');
            await this.pool.end();
            this.pool = null;
            
            return await this.initialize();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ë–î:', error.message);
            return false;
        }
    }
}

module.exports = DatabaseInitializer;