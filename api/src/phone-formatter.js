// // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω
// class PhoneFormatter {
  
//   // –ö–æ–¥—ã —Å—Ç—Ä–∞–Ω –∏ –∏—Ö —Ñ–æ—Ä–º–∞—Ç—ã
//   static COUNTRY_CODES = {
//     // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
//     '1': { name: 'US/Canada', length: 11, format: 'XXXXXXXXXXX' },
//     '7': { name: 'Russia/Kazakhstan', length: 11, format: 'XXXXXXXXXXX' },
//     '33': { name: 'France', length: 12, format: 'XXXXXXXXXXXX' },
//     '34': { name: 'Spain', length: 11, format: 'XXXXXXXXXXX' },
//     '39': { name: 'Italy', length: 12, format: 'XXXXXXXXXXXX' },
//     '44': { name: 'UK', length: 12, format: 'XXXXXXXXXXXX' },
//     '49': { name: 'Germany', length: 12, format: 'XXXXXXXXXXXX' },
//     '55': { name: 'Brazil', length: 13, format: 'XXXXXXXXXXXXX' },
//     '66': { name: 'Thailand', length: 11, format: 'XXXXXXXXXXX' },
//     '81': { name: 'Japan', length: 12, format: 'XXXXXXXXXXXX' },
//     '86': { name: 'China', length: 13, format: 'XXXXXXXXXXXXX' },
//     '91': { name: 'India', length: 12, format: 'XXXXXXXXXXXX' },
    
//     // –ò—Å–ø–∞–Ω–æ–≥–æ–≤–æ—Ä—è—â–∏–µ —Å—Ç—Ä–∞–Ω—ã –õ–∞—Ç–∏–Ω—Å–∫–æ–π –ê–º–µ—Ä–∏–∫–∏
//     '52': { name: 'Mexico üá≤üáΩ', length: 12, format: 'XXXXXXXXXXXX', localFormat: '044XXXXXXXX' },
//     '54': { name: 'Argentina üá¶üá∑', length: 12, format: 'XXXXXXXXXXXX', localFormat: '011XXXXXXXX' },
//     '56': { name: 'Chile üá®üá±', length: 11, format: 'XXXXXXXXXXX', localFormat: '9XXXXXXXX' },
//     '57': { name: 'Colombia üá®üá¥', length: 12, format: 'XXXXXXXXXXXX', localFormat: '3XXXXXXXXX' },
//     '58': { name: 'Venezuela üáªüá™', length: 12, format: 'XXXXXXXXXXXX', localFormat: '04XXXXXXXX' },
//     '51': { name: 'Peru üáµüá™', length: 11, format: 'XXXXXXXXXXX', localFormat: '9XXXXXXXX' },
//     '593': { name: 'Ecuador üá™üá®', length: 12, format: 'XXXXXXXXXXXX', localFormat: '09XXXXXXXX' },
//     '591': { name: 'Bolivia üáßüá¥', length: 11, format: 'XXXXXXXXXXX', localFormat: '7XXXXXXXX' },
//     '595': { name: 'Paraguay üáµüáæ', length: 12, format: 'XXXXXXXXXXXX', localFormat: '09XXXXXXXX' },
//     '598': { name: 'Uruguay üá∫üáæ', length: 11, format: 'XXXXXXXXXXX', localFormat: '09XXXXXXXX' },
    
//     // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ –∏ –ö–∞—Ä–∏–±—ã (–∏—Å–ø–∞–Ω–æ–≥–æ–≤–æ—Ä—è—â–∏–µ)
//     '502': { name: 'Guatemala üá¨üáπ', length: 11, format: 'XXXXXXXXXXX', localFormat: '5XXXXXXXX' },
//     '503': { name: 'El Salvador üá∏üáª', length: 11, format: 'XXXXXXXXXXX', localFormat: '7XXXXXXX' },
//     '504': { name: 'Honduras üá≠üá≥', length: 11, format: 'XXXXXXXXXXX', localFormat: '9XXXXXXX' },
//     '505': { name: 'Nicaragua üá≥üáÆ', length: 11, format: 'XXXXXXXXXXX', localFormat: '8XXXXXXX' },
//     '506': { name: 'Costa Rica üá®üá∑', length: 11, format: 'XXXXXXXXXXX', localFormat: '8XXXXXXX' },
//     '507': { name: 'Panama üáµüá¶', length: 11, format: 'XXXXXXXXXXX', localFormat: '6XXXXXXX' },
//     '53': { name: 'Cuba üá®üá∫', length: 10, format: 'XXXXXXXXXX', localFormat: '5XXXXXXX' },
//     '1809': { name: 'Dominican Republic üá©üá¥', length: 13, format: 'XXXXXXXXXXXXX', localFormat: '809XXXXXXX' },
//     '1829': { name: 'Dominican Republic üá©üá¥', length: 13, format: 'XXXXXXXXXXXXX', localFormat: '829XXXXXXX' },
//     '1849': { name: 'Dominican Republic üá©üá¥', length: 13, format: 'XXXXXXXXXXXXX', localFormat: '849XXXXXXX' },
    
//     // –ò—Å–ø–∞–Ω–∏—è
//     '34': { name: 'Spain üá™üá∏', length: 11, format: 'XXXXXXXXXXX', localFormat: '6XXXXXXXX' },
    
//     // –≠–∫–≤–∞—Ç–æ—Ä–∏–∞–ª—å–Ω–∞—è –ì–≤–∏–Ω–µ—è (–∏—Å–ø–∞–Ω–æ–≥–æ–≤–æ—Ä—è—â–∞—è)
//     '240': { name: 'Equatorial Guinea üá¨üá∂', length: 12, format: 'XXXXXXXXXXXX', localFormat: '222XXXXXX' },
    
//     // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
//     '380': { name: 'Ukraine', length: 12, format: 'XXXXXXXXXXXX' },
//     '375': { name: 'Belarus', length: 12, format: 'XXXXXXXXXXXX' },
//     '371': { name: 'Latvia', length: 11, format: 'XXXXXXXXXXX' },
//     '372': { name: 'Estonia', length: 11, format: 'XXXXXXXXXXX' },
//     '373': { name: 'Moldova', length: 11, format: 'XXXXXXXXXXX' },
//     '374': { name: 'Armenia', length: 11, format: 'XXXXXXXXXXX' },
//     '994': { name: 'Azerbaijan', length: 12, format: 'XXXXXXXXXXXX' },
//     '995': { name: 'Georgia', length: 12, format: 'XXXXXXXXXXXX' },
//     '996': { name: 'Kyrgyzstan', length: 12, format: 'XXXXXXXXXXXX' },
//     '998': { name: 'Uzbekistan', length: 12, format: 'XXXXXXXXXXXX' }
//   };

//   /**
//    * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –Ω–æ–º–µ—Ä–∞
//    */
//   static detectCountryCode(phone) {
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥—ã –æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º
//     const codes = Object.keys(this.COUNTRY_CODES).sort((a, b) => b.length - a.length);
    
//     for (const code of codes) {
//       if (phone.startsWith(code)) {
//         return code;
//       }
//     }
    
//     return null;
//   }

//   /**
//    * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –Ω–æ–º–µ—Ä–∞
//    */
//   static formatToWID(phoneNumber) {
//     console.log('üîÑ Formatting phone:', phoneNumber);
    
//     if (!phoneNumber) {
//       throw new Error('Phone number is required');
//     }

//     // –ï—Å–ª–∏ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ WID, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
//     if (String(phoneNumber).includes('@c.us')) {
//       return String(phoneNumber);
//     }

//     // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
//     let phone = String(phoneNumber).replace(/\D/g, '');
//     console.log('üì± Digits only:', phone);

//     // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
//     phone = phone.replace(/^0+/, '');
//     console.log('üî¢ No leading zeros:', phone);

//     // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
//     if (!phone) {
//       throw new Error('Invalid phone number: no digits found');
//     }

//     // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
//     const countryCode = this.detectCountryCode(phone);
    
//     if (countryCode) {
//       const country = this.COUNTRY_CODES[countryCode];
//       console.log(`üåç Detected country: ${country.name} (+${countryCode})`);
//       console.log(`üìè Expected length: ${country.length}, actual: ${phone.length}`);
      
//       // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞
//       if (phone.length === country.length) {
//         console.log('‚úÖ Length matches, using as is');
//       } else if (phone.length === country.length - countryCode.length) {
//         // –ù–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥
//         phone = countryCode + phone;
//         console.log(`üîß Added country code: ${phone}`);
//       } else {
//         console.log(`‚ö†Ô∏è Length mismatch: expected ${country.length}, got ${phone.length}`);
//       }
//     } else {
//       console.log('‚ùì Country code not detected');
      
//       // –ü—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å –ø–æ –¥–ª–∏–Ω–µ
//       if (phone.length === 10) {
//         // –í–æ–∑–º–æ–∂–Ω–æ US –Ω–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
//         phone = '1' + phone;
//         console.log('üá∫üá∏ Assuming US number, added +1:', phone);
//       } else if (phone.length === 11 && phone.startsWith('8')) {
//         // –í–æ–∑–º–æ–∂–Ω–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8XXXXXXXXXX
//         phone = '7' + phone.substring(1);
//         console.log('üá∑üá∫ Converted 8XXX to 7XXX format:', phone);
//       }
//     }

//     // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
//     if (phone.length < 10 || phone.length > 15) {
//       throw new Error(`Invalid phone length: ${phone.length} digits (need 10-15)`);
//     }

//     const wid = phone + '@c.us';
//     console.log('‚ú® Final WID:', wid);
    
//     return wid;
//   }

//   /**
//    * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ WID
//    */
//   static isValidWID(wid) {
//     const pattern = /^\d{10,15}@c\.us$/;
//     return pattern.test(wid);
//   }

//   /**
//    * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è –Ω–æ–º–µ—Ä–∞
//    */
//   static getAlternativeFormats(phoneNumber) {
//     const phone = String(phoneNumber).replace(/\D/g, '').replace(/^0+/, '');
//     const alternatives = [];
    
//     // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
//     alternatives.push(phone + '@c.us');
    
//     // –î–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
//     if (phone.startsWith('7') && phone.length === 11) {
//       alternatives.push('8' + phone.substring(1) + '@c.us');
//     }
//     if (phone.startsWith('8') && phone.length === 11) {
//       alternatives.push('7' + phone.substring(1) + '@c.us');
//     }
    
//     // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
//     const countryCode = this.detectCountryCode(phone);
    
//     if (countryCode) {
//       const country = this.COUNTRY_CODES[countryCode];
//       const localNumber = phone.substring(countryCode.length);
      
//       // –û–±—â–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
//       if (localNumber.length > 0) {
//         alternatives.push(localNumber + '@c.us');
//         alternatives.push('0' + localNumber + '@c.us');
//       }
      
//       // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –∏—Å–ø–∞–Ω–æ–≥–æ–≤–æ—Ä—è—â–∏—Ö —Å—Ç—Ä–∞–Ω
//       if (country.localFormat) {
//         console.log(`üåç Trying local format for ${country.name}: ${country.localFormat}`);
//       }
      
//       switch (countryCode) {
//         case '52': // –ú–µ–∫—Å–∏–∫–∞
//           if (localNumber.length === 10) {
//             // –ú–µ–∫—Å–∏–∫–∞: +52 1 XXX XXX XXXX (–º–æ–±–∏–ª—å–Ω—ã–µ)
//             alternatives.push('521' + localNumber + '@c.us');
//             // –ú–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: 044 + –Ω–æ–º–µ—Ä –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω—ã
//             alternatives.push('044' + localNumber + '@c.us');
//           }
//           break;
          
//         case '54': // –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞
//           if (localNumber.length >= 8) {
//             // –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞: +54 9 11 XXXX XXXX (–º–æ–±–∏–ª—å–Ω—ã–µ Buenos Aires)
//             if (localNumber.startsWith('9')) {
//               alternatives.push('54' + localNumber.substring(1) + '@c.us');
//             } else {
//               alternatives.push('549' + localNumber + '@c.us');
//             }
//             alternatives.push('011' + localNumber + '@c.us');
//           }
//           break;
          
//         case '57': // –ö–æ–ª—É–º–±–∏—è
//           if (localNumber.length === 10) {
//             // –ö–æ–ª—É–º–±–∏—è: –º–æ–±–∏–ª—å–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 3
//             if (!localNumber.startsWith('3')) {
//               alternatives.push('573' + localNumber.substring(1) + '@c.us');
//             }
//           }
//           break;
          
//         case '56': // –ß–∏–ª–∏
//           if (localNumber.length >= 8) {
//             // –ß–∏–ª–∏: –º–æ–±–∏–ª—å–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 9
//             if (!localNumber.startsWith('9')) {
//               alternatives.push('569' + localNumber + '@c.us');
//             }
//           }
//           break;
          
//         case '51': // –ü–µ—Ä—É
//           if (localNumber.length >= 8) {
//             // –ü–µ—Ä—É: –º–æ–±–∏–ª—å–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 9
//             if (!localNumber.startsWith('9')) {
//               alternatives.push('519' + localNumber + '@c.us');
//             }
//           }
//           break;
          
//         case '58': // –í–µ–Ω–µ—Å—É—ç–ª–∞
//           if (localNumber.length >= 9) {
//             // –í–µ–Ω–µ—Å—É—ç–ª–∞: –º–æ–±–∏–ª—å–Ω—ã–µ 04XX
//             if (!localNumber.startsWith('04')) {
//               alternatives.push('5804' + localNumber.substring(2) + '@c.us');
//             }
//           }
//           break;
          
//         case '593': // –≠–∫–≤–∞–¥–æ—Ä
//           if (localNumber.length >= 8) {
//             // –≠–∫–≤–∞–¥–æ—Ä: –º–æ–±–∏–ª—å–Ω—ã–µ 09X
//             if (!localNumber.startsWith('9')) {
//               alternatives.push('5939' + localNumber + '@c.us');
//             }
//           }
//           break;
          
//         case '1809': // –î–æ–º–∏–Ω–∏–∫–∞–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞
//         case '1829':
//         case '1849':
//           // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã DR
//           const drCodes = ['1809', '1829', '1849'];
//           drCodes.forEach(code => {
//             if (code !== countryCode) {
//               alternatives.push(code + localNumber + '@c.us');
//             }
//           });
//           break;
          
//         case '34': // –ò—Å–ø–∞–Ω–∏—è
//           if (localNumber.length >= 8) {
//             // –ò—Å–ø–∞–Ω–∏—è: –º–æ–±–∏–ª—å–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 6, 7, 9
//             if (!['6', '7', '9'].includes(localNumber[0])) {
//               alternatives.push('346' + localNumber + '@c.us');
//               alternatives.push('347' + localNumber + '@c.us');
//             }
//           }
//           break;
//       }
//     }
    
//     // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
//     return [...new Set(alternatives)].filter(alt => {
//       const numberPart = alt.replace('@c.us', '');
//       return numberPart.length >= 10 && numberPart.length <= 15;
//     });
//   }
// }

// // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ WhatsApp —Å–µ—Ä–≤–∏—Å
// async function sendMessageWithRetry(phoneNumber, message, leadId = null) {
//   if (!this.isReady) {
//     throw new Error('WhatsApp client not ready');
//   }

//   try {
//     // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç
//     const wid = PhoneFormatter.formatToWID(phoneNumber);
//     console.log(`üìû Trying primary format: ${wid}`);
    
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
//     let isRegistered = await this.client.isRegisteredUser(wid);
//     let workingWid = wid;
    
//     // –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
//     if (!isRegistered) {
//       console.log('‚ùå Primary format not registered, trying alternatives...');
//       const alternatives = PhoneFormatter.getAlternativeFormats(phoneNumber);
      
//       for (const altWid of alternatives) {
//         if (altWid === wid) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π
        
//         console.log(`üîÑ Trying alternative: ${altWid}`);
//         isRegistered = await this.client.isRegisteredUser(altWid);
        
//         if (isRegistered) {
//           console.log(`‚úÖ Found working format: ${altWid}`);
//           workingWid = altWid;
//           break;
//         }
//       }
//     }
    
//     if (!isRegistered) {
//       throw new Error(`Number ${phoneNumber} is not registered on WhatsApp. Tried formats: ${[wid, ...PhoneFormatter.getAlternativeFormats(phoneNumber)].join(', ')}`);
//     }
    
//     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
//     console.log(`üì§ Sending message to: ${workingWid}`);
//     const chat = await this.client.getChatById(workingWid);
//     const result = await chat.sendMessage(String(message));
    
//     console.log('‚úÖ Message sent successfully');
//     return result;
    
//   } catch (error) {
//     console.error('‚ùå Send error:', error.message);
//     throw error;
//   }
// }

// // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
// module.exports = {
//   PhoneFormatter,
//   sendMessageWithRetry
// };