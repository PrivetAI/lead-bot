// api/src/whatsapp/humanBehavior.js

class HumanBehaviorSimulator {
  constructor() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è (—Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
    this.readingSpeed = {
      min: 180, // –º–µ–¥–ª–µ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
      max: 300, // –±—ã—Å—Ç—Ä–æ–µ —á—Ç–µ–Ω–∏–µ
      average: 240
    };
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—á–∞—Ç–∏ (—Å–∏–º–≤–æ–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
    this.typingSpeed = {
      min: 180, // –º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—á–∞—Ç—å (3 —Å–∏–º–≤–æ–ª–∞ –≤ —Å–µ–∫—É–Ω–¥—É)
      max: 360, // –±—ã—Å—Ç—Ä–∞—è –ø–µ—á–∞—Ç—å (6 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É)
      average: 240 // —Å—Ä–µ–¥–Ω—è—è –ø–µ—á–∞—Ç—å (4 —Å–∏–º–≤–æ–ª–∞ –≤ —Å–µ–∫—É–Ω–¥—É)
    };
    
    // –ó–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (–º—Å)
    this.delays = {
      beforeReading: { min: 1000, max: 3000 }, // 1-3 —Å–µ–∫ –¥–æ –ø—Ä–æ—á—Ç–µ–Ω–∏—è
      afterReading: { min: 2000, max: 5000 }, // 2-5 —Å–µ–∫ –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞
      beforeTyping: { min: 1500, max: 4000 }, // 1.5-4 —Å–µ–∫ –¥–æ –Ω–∞—á–∞–ª–∞ –ø–µ—á–∞—Ç–∏
      betweenTyping: { min: 800, max: 2000 }, // 0.8-2 —Å–µ–∫ –ø–∞—É–∑–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∏
      afterTyping: { min: 500, max: 1500 } // 0.5-1.5 —Å–µ–∫ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    };
    
    // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π
    this.probabilities = {
      makingTypoPause: 0.2, // –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã –ø—Ä–∏ "–æ–ø–µ—á–∞—Ç–∫–µ" (20%)
      longPause: 0.15, // –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–π –ø–∞—É–∑—ã (15%)
      fastResponse: 0.1 // –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (10%)
    };
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
  random(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }
  
  // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  async simulateMessageReading(waId, sendSeenCallback) {
    // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º (2-8 —Å–µ–∫—É–Ω–¥)
    const viewDelay = this.random(2000, 8000);
    console.log(`‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º: ${viewDelay}–º—Å (${waId})`);
    
    // –ñ–¥–µ–º
    await new Promise(resolve => setTimeout(resolve, viewDelay));
    
    console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...');
    
    try {
      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"
      await sendSeenCallback();
      console.log('‚úÖ Callback –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ callback:', error);
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    }
  }
  
  // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  calculateReadingTime(text) {
    const words = text.trim().split(/\s+/).length;
    const wpm = this.random(this.readingSpeed.min, this.readingSpeed.max);
    const baseTime = (words / wpm) * 60000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
    const variance = baseTime * 0.2; // ¬±20%
    const readingTime = baseTime + this.random(-variance, variance);
    
    // –ú–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞, –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
    return Math.max(1000, Math.min(readingTime, 10000));
  }
  
  // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—á–∞—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  calculateTypingTime(text) {
    const chars = text.length;
    const cpm = this.random(this.typingSpeed.min, this.typingSpeed.max);
    const baseTime = (chars / cpm) * 60000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—ã –Ω–∞ "–æ–±–¥—É–º—ã–≤–∞–Ω–∏–µ" –∫–∞–∂–¥—ã–µ 20-30 —Å–∏–º–≤–æ–ª–æ–≤
    const thinkingPauses = Math.floor(chars / 25) * this.random(500, 1500);
    
    // –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—É–∑—ã –ø—Ä–∏ "–æ–ø–µ—á–∞—Ç–∫–∞—Ö"
    let typoPauses = 0;
    if (Math.random() < this.probabilities.makingTypoPause) {
      typoPauses = this.random(2000, 4000); // 2-4 —Å–µ–∫ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    }
    
    const totalTime = baseTime + thinkingPauses + typoPauses;
    
    // –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã, –º–∞–∫—Å–∏–º—É–º 45 —Å–µ–∫—É–Ω–¥
    return Math.max(3000, Math.min(totalTime, 45000));
  }
  
  // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  async simulateMessageSending(incomingMessage, outgoingMessage, callbacks) {
    const isQuickResponse = outgoingMessage.length < 50 && Math.random() < 0.3;
    const sequence = isQuickResponse 
      ? await this.generateQuickResponse(outgoingMessage)
      : await this.generateResponseSequence(incomingMessage, outgoingMessage);
    
    console.log('üé≠ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è...');
    
    let sentMessage = null;
    
    for (const step of sequence) {
      console.log(`  ${step.description}`);
      
      switch (step.action) {
        case 'wait':
          await new Promise(resolve => setTimeout(resolve, step.duration));
          break;
          
        case 'typing':
          await callbacks.sendTyping();
          break;
          
        case 'stopTyping':
          // WhatsApp –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
          break;
          
        case 'send':
          sentMessage = await callbacks.sendMessage();
          break;
      }
    }
    
    return sentMessage;
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞
  async generateResponseSequence(incomingMessage, outgoingMessage) {
    const sequence = [];
    
    // 1. –í—Ä–µ–º—è –Ω–∞ –æ–±–¥—É–º—ã–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –≤ handleIncomingMessage)
    const thinkingTime = this.random(
      this.delays.afterReading.min,
      this.delays.afterReading.max
    );
    sequence.push({
      action: 'wait',
      duration: thinkingTime,
      description: `–û–±–¥—É–º—ã–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (${Math.round(thinkingTime/1000)}—Å)`
    });
    
    // –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –ø–∞—É–∑—É (—á–µ–ª–æ–≤–µ–∫ –æ—Ç–≤–ª–µ–∫—Å—è)
    if (Math.random() < this.probabilities.longPause) {
      const longPause = this.random(10000, 30000); // 10-30 —Å–µ–∫
      sequence.push({
        action: 'wait',
        duration: longPause,
        description: `–î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ - –æ—Ç–≤–ª–µ–∫—Å—è (${Math.round(longPause/1000)}—Å)`
      });
    }
    
    // 2. –ù–∞—á–∞–ª–æ –ø–µ—á–∞—Ç–∏
    sequence.push({
      action: 'typing',
      description: '–ù–∞—á–∞—Ç—å –ø–µ—á–∞—Ç–∞—Ç—å'
    });
    
    // 3. –í—Ä–µ–º—è –ø–µ—á–∞—Ç–∏ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
    const typingTime = this.calculateTypingTime(outgoingMessage);
    const typingSegments = this.splitTypingTime(typingTime);
    
    for (const segment of typingSegments) {
      sequence.push({
        action: 'wait',
        duration: segment.duration,
        description: segment.description
      });
      
      if (segment.pauseAfter) {
        sequence.push({
          action: 'stopTyping',
          description: '–ü–∞—É–∑–∞ –≤ –ø–µ—á–∞—Ç–∏'
        });
        sequence.push({
          action: 'wait',
          duration: segment.pauseDuration,
          description: '–î—É–º–∞–µ—Ç'
        });
        sequence.push({
          action: 'typing',
          description: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—á–∞—Ç–∞—Ç—å'
        });
      }
    }
    
    // 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const afterTypeDelay = this.random(
      this.delays.afterTyping.min,
      this.delays.afterTyping.max
    );
    sequence.push({
      action: 'wait',
      duration: afterTypeDelay,
      description: '–ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π'
    });
    
    // 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    sequence.push({
      action: 'send',
      description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
    });
    
    return sequence;
  }
  
  // –†–∞–∑–±–∏–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—á–∞—Ç–∏ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã —Å –ø–∞—É–∑–∞–º–∏
  splitTypingTime(totalTime) {
    const segments = [];
    let remainingTime = totalTime;
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—É–∑ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    const pauseCount = Math.random() < 0.7 ? 0 : this.random(1, 2);
    
    if (pauseCount === 0) {
      segments.push({
        duration: totalTime,
        description: `–ü–µ—á–∞—Ç–∞–µ—Ç (${Math.round(totalTime/1000)}—Å)`,
        pauseAfter: false
      });
    } else {
      const segmentCount = pauseCount + 1;
      const baseSegmentTime = totalTime / segmentCount;
      
      for (let i = 0; i < segmentCount; i++) {
        const variance = baseSegmentTime * 0.3;
        const segmentTime = baseSegmentTime + this.random(-variance, variance);
        
        segments.push({
          duration: Math.max(1000, segmentTime),
          description: `–ü–µ—á–∞—Ç–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç ${i+1}`,
          pauseAfter: i < segmentCount - 1,
          pauseDuration: i < segmentCount - 1 ? this.random(500, 2000) : 0
        });
        
        remainingTime -= segmentTime;
      }
    }
    
    return segments;
  }
  
  // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  async simulateWelcomeMessage(message, callbacks) {
    // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const initialDelay = this.random(1000, 2000);
    await new Promise(resolve => setTimeout(resolve, initialDelay));
    
    // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—á–∞—Ç–∞—Ç—å
    await callbacks.sendTyping();
    
    // –í—Ä–µ–º—è –ø–µ—á–∞—Ç–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—á–µ)
    const typingTime = Math.min(
      this.calculateTypingTime(message),
      5000
    );
    await new Promise(resolve => setTimeout(resolve, typingTime));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    return await callbacks.sendMessage();
  }
  
  // –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç (–¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
  async generateQuickResponse(outgoingMessage) {
    return [
      {
        action: 'wait',
        duration: this.random(300, 800),
        description: '–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è'
      },
      {
        action: 'typing',
        description: '–ù–∞—á–∞—Ç—å –ø–µ—á–∞—Ç–∞—Ç—å'
      },
      {
        action: 'wait',
        duration: this.random(1000, 2000),
        description: '–ë—ã—Å—Ç—Ä–∞—è –ø–µ—á–∞—Ç—å'
      },
      {
        action: 'send',
        description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
      }
    ];
  }
}

module.exports = HumanBehaviorSimulator;