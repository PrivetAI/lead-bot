const { Client, LocalAuth } = require('whatsapp-web.js');
const axios = require('axios');
const db = require('../database/connection');
const qrcodeTerminal = require('qrcode-terminal');

class WhatsAppService {
  constructor() {
    this.client = null;
    this.isReady = false;
    this.qrCode = null;
    this.retryAttempts = 3;
    this.retryDelay = 5000;
  }

  async initialize() {
    try {
      console.log('Initializing WhatsApp client...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª—é—á–µ–Ω –ª–∏ WhatsApp
      if (process.env.DISABLE_WHATSAPP === 'true') {
        console.log('WhatsApp is disabled by environment variable');
        return;
      }
      
      this.client = new Client({
        authStrategy: new LocalAuth({ 
          clientId: 'lead-bot',
          dataPath: '/app/sessions'
        }),
        puppeteer: {
          headless: true,
          args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--single-process',
            '--disable-gpu'
          ]
        }
      });

      this.setupEventHandlers();
      await this.client.initialize();
      
    } catch (error) {
      console.error('Failed to initialize WhatsApp:', error);
      throw error;
    }
  }

  setupEventHandlers() {
    this.client.on('qr', (qr) => {
      this.qrCode = qr;
      console.log('\n===========================================');
      console.log('üì± WhatsApp QR Code Generated!');
      console.log('Scan this QR code with WhatsApp on your phone:');
      console.log('===========================================\n');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
      qrcodeTerminal.generate(qr, { small: true });
      
      console.log('\n===========================================');
      console.log('Steps to connect:');
      console.log('1. Open WhatsApp on your phone');
      console.log('2. Go to Settings ‚Üí Linked Devices');
      console.log('3. Tap "Link a Device"');
      console.log('4. Scan this QR code');
      console.log('===========================================\n');
    });

    this.client.on('ready', () => {
      this.isReady = true;
      this.qrCode = null;
      console.log('\n‚úÖ WhatsApp client is ready and connected!');
      console.log('===========================================\n');
    });

    this.client.on('authenticated', () => {
      console.log('‚úÖ WhatsApp client authenticated successfully');
    });

    this.client.on('auth_failure', (msg) => {
      console.error('‚ùå WhatsApp authentication failure:', msg);
    });

    this.client.on('disconnected', (reason) => {
      console.log('‚ö†Ô∏è  WhatsApp client disconnected:', reason);
      this.isReady = false;
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      setTimeout(() => this.reconnect(), 10000);
    });

    this.client.on('message', async (message) => {
      await this.handleIncomingMessage(message);
    });

    this.client.on('message_create', async (message) => {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      if (message.fromMe) {
        await this.logOutgoingMessage(message);
      }
    });
  }

  async reconnect() {
    console.log('Attempting to reconnect WhatsApp...');
    try {
      await this.client.destroy();
      await this.initialize();
    } catch (error) {
      console.error('Reconnection failed:', error);
      setTimeout(() => this.reconnect(), 30000);
    }
  }

  async handleIncomingMessage(message) {
    try {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–µ –∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (message.from === 'status@broadcast' || message.isGroupMsg) return;

      console.log('Incoming message from:', message.from, 'Content:', message.body);

      const contact = await message.getContact();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–∏–¥ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
      const leadResult = await db.query(
        'SELECT * FROM leads WHERE wa_id = $1 OR phone = $2',
        [message.from, contact.number]
      );

      let leadId = null;
      if (leadResult.rows.length > 0) {
        leadId = leadResult.rows[0].id;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
      await this.saveMessage({
        wa_id: message.from,
        wa_phone: contact.number,
        message: message.body,
        message_type: message.type,
        timestamp: message.timestamp
      }, 'incoming', leadId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI
      await this.sendToN8n({
        wa_id: message.from,
        wa_phone: contact.number,
        message: message.body,
        lead_id: leadId,
        direction: 'incoming',
        contact_name: contact.name || contact.pushname,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('Error handling WhatsApp message:', error);
    }
  }

  async logOutgoingMessage(message) {
    try {
      const leadResult = await db.query(
        'SELECT id FROM leads WHERE wa_id = $1',
        [message.to]
      );

      const leadId = leadResult.rows.length > 0 ? leadResult.rows[0].id : null;

      await this.saveMessage({
        wa_id: message.to,
        message: message.body,
        message_type: message.type,
        timestamp: message.timestamp
      }, 'outgoing', leadId);
    } catch (error) {
      console.error('Error logging outgoing message:', error);
    }
  }

  async sendMessage(waId, message, leadId = null) {
    if (!this.isReady) {
      throw new Error('WhatsApp client not ready');
    }

    let attempts = 0;
    while (attempts < this.retryAttempts) {
      try {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const chatId = waId.includes('@c.us') ? waId : `${waId}@c.us`;
        
        await this.client.sendMessage(chatId, message);
        console.log(`Message sent to ${chatId}`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await this.saveMessage({
          wa_id: chatId,
          message,
          message_type: 'text'
        }, 'outgoing', leadId);

        return { success: true };
      } catch (error) {
        attempts++;
        console.error(`Attempt ${attempts} failed:`, error.message);
        
        if (attempts < this.retryAttempts) {
          await new Promise(resolve => setTimeout(resolve, this.retryDelay));
        } else {
          throw error;
        }
      }
    }
  }

  async saveMessage(messageData, direction, leadId = null) {
    try {
      await db.query(
        `INSERT INTO conversations 
         (lead_id, platform, direction, message_type, content, metadata) 
         VALUES ($1, $2, $3, $4, $5, $6)`,
        [
          leadId,
          'whatsapp',
          direction,
          messageData.message_type || 'text',
          messageData.message,
          JSON.stringify({
            wa_id: messageData.wa_id,
            wa_phone: messageData.wa_phone,
            timestamp: messageData.timestamp
          })
        ]
      );
    } catch (error) {
      console.error('Error saving message to DB:', error);
    }
  }

  async sendToN8n(data) {
    try {
      const n8nUrl = process.env.N8N_WEBHOOK_URL || 'http://n8n:5678/webhook/whatsapp-incoming';
      await axios.post(n8nUrl, data, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 5000
      });
      console.log('Message sent to n8n workflow');
    } catch (error) {
      console.error('Error sending to n8n:', error.message);
    }
  }

  async sendWelcomeMessage(waId, leadData) {
    const templates = {
      default: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${leadData.name}! üëã


–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:
‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å?
‚Ä¢ –°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –≤ –º–µ—Å—è—Ü?
‚Ä¢ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å CRM-—Å–∏—Å—Ç–µ–º–∞?

–ë—É–¥—É —Ä–∞–¥ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!`,
    };

    const template = templates[leadData.source] || templates.default;
    await this.sendMessage(waId, template, leadData.id);
  }

  async sendTyping(waId) {
    try {
      const chat = await this.client.getChatById(waId);
      await chat.sendStateTyping();
    } catch (error) {
      console.error('Error sending typing state:', error);
    }
  }

  async sendSeen(waId) {
    try {
      const chat = await this.client.getChatById(waId);
      await chat.sendSeen();
    } catch (error) {
      console.error('Error sending seen state:', error);
    }
  }
}

module.exports = new WhatsAppService();