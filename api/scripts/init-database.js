#!/usr/bin/env node

// scripts/init-database.js
const DatabaseInitializer = require('../database/init');
const config = require('../database/config');
const { Pool } = require('pg');

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const isReset = args.includes('--reset') || args.includes('-r');
const isForce = args.includes('--force') || args.includes('-f');
const isTest = args.includes('--test') || args.includes('-t');

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function runConnectionTests(config) {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...');
    
    // –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try {
        const mainPool = new Pool(config);
        await mainPool.query('SELECT NOW()');
        await mainPool.end();
        console.log('  ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: OK');
    } catch (error) {
        console.log('  ‚ùå –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: FAILED');
        console.log(`     –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è n8n –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
        const n8nPool = new Pool({
            ...config,
            user: config.n8nUser,
            password: config.n8nPassword
        });
        
        const result = await n8nPool.query('SELECT COUNT(*) FROM leads');
        await n8nPool.end();
        console.log(`  ‚úÖ N8N –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: OK (–Ω–∞–π–¥–µ–Ω–æ ${result.rows[0].count} –ª–∏–¥–æ–≤)`);
    } catch (error) {
        console.log('  ‚ùå N8N –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: FAILED');
        console.log(`     –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü
    try {
        const testPool = new Pool({
            ...config,
            user: config.n8nUser,
            password: config.n8nPassword
        });
        
        const tables = ['leads', 'chat_history', 'meetings', 'ai_responses_log'];
        for (const table of tables) {
            await testPool.query(`SELECT 1 FROM ${table} LIMIT 1`);
            console.log(`  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: OK`);
        }
        
        await testPool.end();
    } catch (error) {
        console.log(`  ‚ùå –î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–∞–º: FAILED`);
        console.log(`     –û—à–∏–±–∫–∞: ${error.message}`);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
function showHelp() {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/init-database.js [–æ–ø—Ü–∏–∏]\n');
    console.log('–û–ø—Ü–∏–∏:');
    console.log('  --reset, -r     –°–±—Ä–æ—Å–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    console.log('  --force, -f     –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω)');
    console.log('  --test, -t      –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
    console.log('  --help, -h      –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n');
    console.log('–ü—Ä–∏–º–µ—Ä—ã:');
    console.log('  node scripts/init-database.js                  # –û–±—ã—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
    console.log('  node scripts/init-database.js --reset          # –°–±—Ä–æ—Å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ');
    console.log('  node scripts/init-database.js --test           # –° —Ç–µ—Å—Ç–∞–º–∏');
    console.log('  NODE_ENV=production node scripts/init-database.js --force  # –ü—Ä–æ–¥–∞–∫—à–Ω');
}

async function main() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
    if (args.includes('--help') || args.includes('-h')) {
        showHelp();
        process.exit(0);
    }
    
    console.log('üöÄ WhatsApp Sales Automation - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
    console.log(`   Host: ${config.host}:${config.port}`);
    console.log(`   Database: ${config.database}`);
    console.log(`   User: ${config.user}`);
    console.log(`   N8N User: ${config.n8nUser}`);
    console.log(`   Environment: ${process.env.NODE_ENV || 'development'}\n`);
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
    if (process.env.NODE_ENV === 'production' && !isForce) {
        console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ PRODUCTION –æ–∫—Ä—É–∂–µ–Ω–∏–∏!');
        console.log('   –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --force\n');
        process.exit(1);
    }
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è reset
    if (isReset && !isForce) {
        console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–º–∞–Ω–¥–∞ --reset —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ!');
        console.log('   –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --force\n');
        process.exit(1);
    }
    
    const initializer = new DatabaseInitializer(config);
    
    try {
        let success = false;
        
        if (isReset) {
            console.log('üîÑ –†–µ–∂–∏–º —Å–±—Ä–æ—Å–∞: —É–¥–∞–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î...\n');
            success = await initializer.reset();
        } else {
            success = await initializer.initialize();
        }
        
        if (success) {
            console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
            
            if (isTest) {
                await runConnectionTests(config);
            }
            
            console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
            console.log('1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ credential –≤ n8n —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—ã—à–µ');
            console.log('2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ workflow –≤ n8n');
            console.log('3. –ó–∞–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã API –≤ workflow');
            console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ WhatsApp userbot');
            
            process.exit(0);
        } else {
            console.log('\n‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
            process.exit(1);
        }
    } catch (error) {
        console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        console.error('–°—Ç–µ–∫:', error.stack);
        process.exit(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
process.on('SIGINT', () => {
    console.log('\n\n‚èπÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
    console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', reason);
    process.exit(1);
});

process.on('uncaughtException', (error) => {
    console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
    process.exit(1);
});

// –ó–∞–ø—É—Å–∫
main();