{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "amocrm-webhook",
        "options": {}
      },
      "id": "c3ebbcd1-1341-4c54-a3de-5475550eca9a",
      "name": "amoCRM Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        120,
        0
      ],
      "webhookId": "amocrm-lead-webhook"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "telegram-webhook",
        "options": {}
      },
      "id": "7d08fc1d-4294-4c8a-82c5-5c03423196b0",
      "name": "Telegram Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        120,
        460
      ],
      "webhookId": "telegram-message-webhook"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO leads (amocrm_id, name, phone, email, status, source, budget, product_interest, notes) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) ON CONFLICT (amocrm_id) DO UPDATE SET name = $2, phone = $3, email = $4, status = $5, updated_at = NOW() RETURNING *",
        "options": {}
      },
      "id": "d831e196-7834-4929-a80b-534aee34bf33",
      "name": "Save Lead to DB",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        340,
        0
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO conversations (lead_id, platform, direction, message_type, content, metadata) VALUES ((SELECT id FROM leads WHERE amocrm_id = $1), $2, $3, $4, $5, $6) RETURNING *",
        "options": {}
      },
      "id": "af5d74b2-6540-4d7f-833e-38bf13810258",
      "name": "Save Conversation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        340,
        360
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "messages": {
          "values": [
            {
              "content": "Ты эксперт по классификации лидов в B2B продажах. Анализируй информацию о лиде и определяй:\n1. Качество лида (1-10)\n2. Готовность к покупке (cold/warm/hot)\n3. Бюджет (estimated range)\n4. Интересы продукта\n5. Следующие действия\n\nОтвечай только JSON:\n{\n  \"score\": 8,\n  \"temperature\": \"warm\",\n  \"budget_range\": \"50000-100000\",\n  \"interests\": [\"CRM\", \"automation\"],\n  \"next_actions\": [\"schedule_demo\", \"send_materials\"],\n  \"priority\": \"high\",\n  \"reasoning\": \"Причина оценки\"\n}",
              "role": "system"
            },
            {
              "content": "Лид: {{ $json.name }}\nТелефон: {{ $json.phone }}\nEmail: {{ $json.email }}\nИсточник: {{ $json.source }}\nИнтерес: {{ $json.product_interest }}\nЗаметки: {{ $json.notes }}\nПоследнее сообщение: {{ $('save-conversation').item.json.content || 'Нет сообщений' }}"
            }
          ]
        },
        "options": {
          "maxTokens": 500,
          "temperature": 0.3
        }
      },
      "id": "2a6b12be-1f2d-45a4-a32a-925dece66f1e",
      "name": "AI Lead Classifier",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [
        560,
        0
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Ты опытный менеджер по продажам CRM систем с доступом к Google Calendar. Твоя задача:\n1. Анализировать сообщения клиентов\n2. Генерировать персональные ответы\n3. Управлять встречами и демо через календарь\n4. Квалифицировать потребности\n\nДоступные инструменты:\n- Google Calendar: поиск свободного времени, создание/изменение/отмена встреч\n- Информация о клиенте и истории переписки\n\nПравила:\n- Всегда проверяй доступность в календаре перед предложением времени\n- Создавай встречи сразу после подтверждения клиентом\n- Включай в описание встречи всю важную информацию о клиенте\n- При изменении встреч уведомляй клиента\n\nИнформация о клиенте:\nИмя: {{ $('save-lead').item.json.name }}\nТелефон: {{ $('save-lead').item.json.phone }}\nEmail: {{ $('save-lead').item.json.email }}\nИнтерес: {{ $('save-lead').item.json.product_interest }}\nКлассификация: {{ $('ai-classifier').item.json.message.content }}\n\nСообщение клиента: {{ $('save-conversation').item.json.content }}\n\nВремя работы: 9:00-18:00 (пн-пт), часовой пояс Asia/Bangkok",
        "options": {
          "maxIterations": 5,
          "returnIntermediateSteps": true
        }
      },
      "id": "b0ff5f8c-e6b9-467c-9563-3957f8fb454d",
      "name": "AI Sales Agent with Calendar",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.4,
      "position": [
        560,
        360
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE leads SET ai_classification = $1, ai_score = $2, updated_at = NOW() WHERE id = $3 RETURNING *",
        "options": {}
      },
      "id": "c872cff5-bcbf-44d9-ba4d-e7bae371c7ab",
      "name": "Update Lead Classification",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        936,
        0
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://api:3000/telegram/userbot",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chat_id\": {{ $('save-conversation').item.json.metadata.chat_id }},\n  \"message\": {{ JSON.stringify($('ai-sales-agent').item.json.output) }},\n  \"lead_id\": {{ $('save-lead').item.json.id }},\n  \"message_type\": \"ai_response\",\n  \"calendar_actions\": {{ JSON.stringify($('ai-sales-agent').item.json.intermediateSteps) }}\n}",
        "options": {}
      },
      "id": "b3a82eb4-4219-4505-9ab2-73785f89ce5f",
      "name": "Send Telegram Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        936,
        460
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://api:3000/amocrm/update",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"leadId\": {{ $('save-lead').item.json.amocrm_id }},\n  \"status\": {{ JSON.parse($('ai-classifier').item.json.message.content).temperature }},\n  \"note\": \"AI Классификация: {{ JSON.parse($('ai-classifier').item.json.message.content).reasoning }}\\n\\nПоследнее взаимодействие: {{ $('ai-sales-agent').item.json.output }}\"\n}",
        "options": {}
      },
      "id": "d4f3ffb8-1d75-4a4c-82ea-8a245a04512a",
      "name": "Update amoCRM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1156,
        0
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM conversations WHERE lead_id = $1 ORDER BY created_at DESC LIMIT 10",
        "options": {}
      },
      "id": "f27745a3-5348-41d5-b0fe-c897ffa01a76",
      "name": "Get Conversation History",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        340,
        560
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO agent_actions (lead_id, action_type, action_data, calendar_event_id, status) VALUES ($1, $2, $3, $4, $5) RETURNING *",
        "options": {}
      },
      "id": "ce6dea64-aecd-451f-b2d3-ed8cc14bd63f",
      "name": "Log Agent Actions",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1156,
        260
      ]
    },
    {
      "parameters": {
        "jsCode": "const steps = $input.item.json.intermediateSteps || [];\nconst calendarActions = steps.filter(step => \n  step.action && step.action.includes('calendar')\n);\n\nconst results = [];\nfor (const action of calendarActions) {\n  let actionType = 'unknown';\n  let eventId = null;\n  \n  if (action.action.includes('createEvent')) {\n    actionType = 'create_event';\n    eventId = action.observation?.id || null;\n  } else if (action.action.includes('updateEvent')) {\n    actionType = 'update_event';\n    eventId = action.observation?.id || null;\n  } else if (action.action.includes('deleteEvent')) {\n    actionType = 'delete_event';\n  } else if (action.action.includes('getEvents')) {\n    actionType = 'search_events';\n  }\n  \n  results.push({\n    json: {\n      lead_id: $('save-lead').item.json.id,\n      action_type: actionType,\n      action_data: JSON.stringify(action),\n      calendar_event_id: eventId,\n      status: action.observation ? 'success' : 'failed'\n    }\n  });\n}\n\nreturn results.length > 0 ? results : [{\n  json: {\n    lead_id: $('save-lead').item.json.id,\n    action_type: 'no_calendar_action',\n    action_data: JSON.stringify($input.item.json),\n    calendar_event_id: null,\n    status: 'logged'\n  }\n}];"
      },
      "id": "a2ccf305-67a8-4661-9030-9aec26cce4ea",
      "name": "Parse Calendar Actions",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        936,
        260
      ]
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Calendar', ``, 'string') }}",
          "mode": "id",
          "__regex": "(^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)"
        },
        "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
        "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        580,
        700
      ],
      "id": "3e69e080-2a5a-48dd-8592-985abcaef1f9",
      "name": "create"
    }
  ],
  "connections": {
    "amoCRM Webhook": {
      "main": [
        [
          {
            "node": "Save Lead to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Webhook": {
      "main": [
        [
          {
            "node": "Save Conversation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Conversation History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Lead to DB": {
      "main": [
        [
          {
            "node": "AI Lead Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Conversation": {
      "main": [
        [
          {
            "node": "AI Sales Agent with Calendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Lead Classifier": {
      "main": [
        [
          {
            "node": "Update Lead Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Sales Agent with Calendar": {
      "main": [
        [
          {
            "node": "Parse Calendar Actions",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Lead Classification": {
      "main": [
        [
          {
            "node": "Update amoCRM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Calendar Actions": {
      "main": [
        [
          {
            "node": "Log Agent Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create": {
      "ai_tool": [
        [
          {
            "node": "AI Sales Agent with Calendar",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "153a70e05f81f246b19609cee48a90b90798fd47a2d93526a26c89b4d31e1d09"
  }
}