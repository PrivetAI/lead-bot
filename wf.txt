{
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "12345"
  },
  "name": "WhatsApp Sales Automation System",
  "nodes": [
    {
      "parameters": {
        "path": "amocrm-webhook",
        "options": {}
      },
      "id": "amocrm-webhook-node",
      "name": "AmoCRM Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300],
      "webhookId": "amocrm-webhook-12345"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.leads[0].name }}",
              "operation": "isNotEmpty"
            },
            {
              "value1": "={{ $json.leads[0].custom_fields_values?.find(field => field.field_name === '–¢–µ–ª–µ—Ñ–æ–Ω')?.values[0]?.value }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "validate-lead-node",
      "name": "Validate Lead Data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract lead data from AmoCRM webhook\nconst leadData = $input.first().json.leads[0];\nconst customFields = leadData.custom_fields_values || [];\n\n// Find phone number\nconst phoneField = customFields.find(field => \n  field.field_name === '–¢–µ–ª–µ—Ñ–æ–Ω' || field.field_code === 'PHONE'\n);\nconst phone = phoneField?.values[0]?.value || '';\n\n// Clean phone number\nconst cleanPhone = phone.replace(/[^\\d]/g, '');\n\n// Extract other fields\nconst companyField = customFields.find(field => field.field_name === '–ö–æ–º–ø–∞–Ω–∏—è');\nconst businessTypeField = customFields.find(field => field.field_name === '–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞');\nconst employeesField = customFields.find(field => field.field_name === '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');\nconst hasCrmField = customFields.find(field => field.field_name === '–ï—Å—Ç—å CRM');\n\nreturn {\n  lead_id: leadData.id,\n  name: leadData.name || '–ù–æ–≤—ã–π –ª–∏–¥',\n  phone: cleanPhone,\n  company_info: companyField?.values[0]?.value || '',\n  business_type: businessTypeField?.values[0]?.value || '',\n  employees_count: employeesField?.values[0]?.value || '',\n  has_crm: hasCrmField?.values[0]?.value || '',\n  status: 'new',\n  created_at: new Date().toISOString(),\n  whatsapp_number: cleanPhone.startsWith('7') ? cleanPhone : '7' + cleanPhone\n};"
      },
      "id": "extract-lead-node",
      "name": "Extract Lead Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "leads",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "lead_id": "={{ $json.lead_id }}",
            "name": "={{ $json.name }}",
            "phone": "={{ $json.phone }}",
            "company_info": "={{ $json.company_info }}",
            "business_type": "={{ $json.business_type }}",
            "employees_count": "={{ $json.employees_count }}",
            "has_crm": "={{ $json.has_crm }}",
            "status": "={{ $json.status }}",
            "created_at": "={{ $json.created_at }}"
          }
        }
      },
      "id": "save-lead-node",
      "name": "Save Lead to PostgreSQL",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [900, 220],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Main DB"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:3000/api/send-message",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $json.whatsapp_number }}"
            },
            {
              "name": "message",
              "value": "={{ `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${$json.name}! üëã\\n\\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, —è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í–∏–∂—É, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.\\n\\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ–π –∫ –Ω–∞–º –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å? –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å?` }}"
            }
          ]
        }
      },
      "id": "send-welcome-node",
      "name": "Send Welcome WhatsApp",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "path": "whatsapp-userbot-webhook",
        "options": {}
      },
      "id": "whatsapp-webhook-node",
      "name": "WhatsApp Userbot Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 600],
      "webhookId": "whatsapp-userbot-12345"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "is-message-check",
              "leftValue": "={{ $json.message }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ]
        }
      },
      "id": "validate-whatsapp-node",
      "name": "Validate WhatsApp Message",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 600]
    },
    {
      "parameters": {
        "jsCode": "// Extract message data from userbot webhook\nconst data = $input.first().json;\n\n// Clean phone number (remove @ and other symbols)\nconst cleanPhone = data.from?.replace(/[@\\s-]/g, '') || '';\n\nreturn {\n  phone: cleanPhone,\n  message_text: data.message || '',\n  message_type: 'text',\n  contact_name: data.contact_name || data.pushname || '',\n  timestamp: data.timestamp || Date.now(),\n  message_id: data.id || Date.now().toString(),\n  chat_id: data.from || '',\n  is_group: data.isGroup || false\n};"
      },
      "id": "extract-whatsapp-node",
      "name": "Extract WhatsApp Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 600]
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "leads",
          "mode": "list"
        },
        "where": {
          "values": [
            {
              "column": "phone",
              "condition": "equal",
              "value": "={{ $json.phone }}"
            }
          ]
        },
        "options": {}
      },
      "id": "find-lead-node",
      "name": "Find Lead in Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [900, 600],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Main DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "chat_history",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "lead_id": "={{ $('Find Lead in Database').first().json.id }}",
            "phone": "={{ $('Extract WhatsApp Data').first().json.phone }}",
            "message_text": "={{ $('Extract WhatsApp Data').first().json.message_text }}",
            "message_type": "={{ $('Extract WhatsApp Data').first().json.message_type }}",
            "direction": "incoming",
            "created_at": "={{ new Date().toISOString() }}"
          }
        }
      },
      "id": "save-message-node",
      "name": "Save Message to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1120, 600],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Main DB"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $('Find Lead in Database').first().json.classification_status }}",
              "value2": "complete",
              "operation": "equal"
            }
          ]
        }
      },
      "id": "check-classification-node",
      "name": "Check Classification Status",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 600]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer YOUR_OPENAI_API_KEY"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4"
            },
            {
              "name": "messages",
              "value": "={{ [ { \"role\": \"system\", \"content\": \"–¢—ã AI-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å: 1. –†–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ 2. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ 3. –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ 4. –°—Ä–æ—á–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –í–∞–∂–Ω–æ: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–∫–µ—Ç—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –í–µ–¥–∏ –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ, –Ω–æ –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤–ª—è–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\" }, { \"role\": \"user\", \"content\": $('Extract WhatsApp Data').first().json.message_text } ] }}"
            },
            {
              "name": "max_tokens",
              "value": 500
            },
            {
              "name": "temperature",
              "value": 0.7
            }
          ]
        }
      },
      "id": "ai-classifier-node",
      "name": "AI Classifier",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 500]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer YOUR_OPENAI_API_KEY"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4"
            },
            {
              "name": "messages",
              "value": "={{ [ { \"role\": \"system\", \"content\": \"–¢—ã AI-–ø—Ä–æ–¥–∞–≤–µ—Ü. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤–µ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏. –£ —Ç–µ–±—è –µ—Å—Ç—å –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞: 1. –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏–π –ø–æ–¥ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ 2. –†–∞–±–æ—Ç–µ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏ 3. –ó–∞–∫—Ä—ã—Ç–∏–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É. –ë—É–¥—å –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–º, –Ω–æ —Ç–∞–∫—Ç–∏—á–Ω—ã–º.\" }, { \"role\": \"user\", \"content\": $('Extract WhatsApp Data').first().json.message_text } ] }}"
            },
            {
              "name": "max_tokens",
              "value": 500
            },
            {
              "name": "temperature",
              "value": 0.7
            }
          ]
        }
      },
      "id": "ai-sales-node",
      "name": "AI Sales Agent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 700]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:3000/api/send-message",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Extract WhatsApp Data').first().json.phone }}"
            },
            {
              "name": "message",
              "value": "={{ $json.choices[0].message.content }}"
            }
          ]
        }
      },
      "id": "send-ai-response-node",
      "name": "Send AI Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1780, 600]
    },
    {
      "parameters": {
        "jsCode": "// Detect meeting request keywords\nconst messageText = $('Extract WhatsApp Data').first().json.message_text.toLowerCase();\nconst aiResponse = $json.choices[0].message.content.toLowerCase();\n\nconst meetingKeywords = [\n  '–≤—Å—Ç—Ä–µ—á–∞', '–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è', '—Å–æ–∑–≤–æ–Ω', '–∑–≤–æ–Ω–æ–∫', \n  '–¥–µ–º–æ', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–¥–∞', '—Å–æ–≥–ª–∞—Å–µ–Ω', \n  '–ø–æ–¥—Ö–æ–¥–∏—Ç', '–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å', '–∑–∞–ø–∏—Å–∞—Ç—å'\n];\n\nconst needsMeeting = meetingKeywords.some(keyword => \n  messageText.includes(keyword) || aiResponse.includes(keyword)\n);\n\nreturn {\n  needs_meeting: needsMeeting,\n  client_message: messageText,\n  ai_response: aiResponse\n};"
      },
      "id": "detect-meeting-node",
      "name": "Detect Meeting Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 600]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needs_meeting }}",
              "value2": true,
              "operation": "equal"
            }
          ]
        }
      },
      "id": "check-meeting-node",
      "name": "Check Meeting Needed",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2220, 600]
    },
    {
      "parameters": {
        "jsCode": "// Calculate next available meeting slot\nconst now = new Date();\nlet nextSlot = new Date(now);\n\n// If it's after 6 PM, schedule for next day\nif (now.getHours() >= 18) {\n  nextSlot.setDate(nextSlot.getDate() + 1);\n}\n\n// Set to 10 AM\nnextSlot.setHours(10, 0, 0, 0);\n\n// Skip weekends\nwhile (nextSlot.getDay() === 0 || nextSlot.getDay() === 6) {\n  nextSlot.setDate(nextSlot.getDate() + 1);\n}\n\nconst endTime = new Date(nextSlot.getTime() + 60 * 60 * 1000);\n\nreturn {\n  start_time: nextSlot.toISOString(),\n  end_time: endTime.toISOString(),\n  formatted_time: nextSlot.toLocaleString('ru-RU', {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long',\n    hour: '2-digit',\n    minute: '2-digit'\n  })\n};"
      },
      "id": "calculate-time-node",
      "name": "Calculate Meeting Time",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2440, 500]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://www.googleapis.com/calendar/v3/calendars/primary/events",
        "authentication": "oAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "summary",
              "value": "={{ '–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º - ' + $('Find Lead in Database').first().json.name }}"
            },
            {
              "name": "description",
              "value": "={{ '–í—Å—Ç—Ä–µ—á–∞ —Å –ª–∏–¥–æ–º\\n–¢–µ–ª–µ—Ñ–æ–Ω: ' + $('Extract WhatsApp Data').first().json.phone }}"
            },
            {
              "name": "start",
              "value": "={{ { \"dateTime\": $('Calculate Meeting Time').first().json.start_time, \"timeZone\": \"Europe/Moscow\" } }}"
            },
            {
              "name": "end",
              "value": "={{ { \"dateTime\": $('Calculate Meeting Time').first().json.end_time, \"timeZone\": \"Europe/Moscow\" } }}"
            }
          ]
        }
      },
      "id": "create-event-node",
      "name": "Create Calendar Event",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2440, 600],
      "credentials": {
        "googleOAuth2Api": {
          "id": "google-oauth-credentials",
          "name": "Google OAuth2"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:3000/api/send-message",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Extract WhatsApp Data').first().json.phone }}"
            },
            {
              "name": "message",
              "value": "={{ `–û—Ç–ª–∏—á–Ω–æ! –í—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ ${$('Calculate Meeting Time').first().json.formatted_time}.\\n\\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É.\\n\\n–î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã` }}"
            }
          ]
        }
      },
      "id": "confirm-meeting-node",
      "name": "Send Meeting Confirmation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2660, 600]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "leads",
          "mode": "list"
        },
        "where": {
          "values": [
            {
              "column": "phone",
              "condition": "equal",
              "value": "={{ $('Extract WhatsApp Data').first().json.phone }}"
            }
          ]
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "status": "meeting_scheduled",
            "meeting_scheduled": true,
            "meeting_time": "={{ $('Calculate Meeting Time').first().json.start_time }}",
            "updated_at": "={{ new Date().toISOString() }}"
          }
        }
      },
      "id": "update-status-node",
      "name": "Update Lead Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2660, 700],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Main DB"
        }
      }
    }
  ],
  "connections": {
    "AmoCRM Webhook": {
      "main": [
        [
          {
            "node": "Validate Lead Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Lead Data": {
      "main": [
        [
          {
            "node": "Extract Lead Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Lead Data": {
      "main": [
        [
          {
            "node": "Save Lead to PostgreSQL",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Welcome WhatsApp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Webhook": {
      "main": [
        [
          {
            "node": "Validate WhatsApp Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate WhatsApp Message": {
      "main": [
        [
          {
            "node": "Extract WhatsApp Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract WhatsApp Data": {
      "main": [
        [
          {
            "node": "Find Lead in Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Lead in Database": {
      "main": [
        [
          {
            "node": "Save Message to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Message to Database": {
      "main": [
        [
          {
            "node": "Check Classification Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Classification Status": {
      "main": [
        [
          {
            "node": "AI Sales Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Classifier": {
      "main": [
        [
          {
            "node": "Send AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Sales Agent": {
      "main": [
        [
          {
            "node": "Send AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send AI Response": {
      "main": [
        [
          {
            "node": "Detect Meeting Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detect Meeting Request": {
      "main": [
        [
          {
            "node": "Check Meeting Needed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Meeting Needed": {
      "main": [
        [
          {
            "node": "Calculate Meeting Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Meeting Time": {
      "main": [
        [
          {
            "node": "Create Calendar Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Calendar Event": {
      "main": [
        [
          {
            "node": "Send Meeting Confirmation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update Lead Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 2,
  "updatedAt": "2025-06-06T12:00:00.000Z",
  "versionId": "1"
}